{"version":3,"sources":["webpack:///src/app/youtube/youtube.component.ts","webpack:///src/app/youtube/youtube.component.html","webpack:///src/app/twitter-feed/twitterservice.service.ts","webpack:///src/app/nav-bar/nav-bar.component.ts","webpack:///src/app/nav-bar/nav-bar.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/wikipedia/wikipedia.component.ts","webpack:///src/app/wikipedia/wikipedia.component.html","webpack:///src/app/wikipedia-data.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/spotify/spotify.component.ts","webpack:///src/app/spotify/spotify.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/twitter-feed/twitter-feed.component.html","webpack:///src/app/twitter-feed/twitter-feed.component.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["YoutubeComponent","TwitterService","http","api_url","get","responseType","pipe","data","NavBarComponent","environment","production","WikipediaComponent","wikipediaService","extract_html","timestamp","thumbnail","source","width","height","getRequest","subscribe","WikipediaDataService","WIKI_URL","observe","AppComponent","title","SpotifyComponent","appRoutes","path","component","redirectTo","pathMatch","AppModule","TwitterFeedComponent","api","getTwitterTimeline","getTimeline","timeline","console","log","routes","AppRoutingModule","forRoot","bootstrapModule","err","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-youtube',\n  templateUrl: './youtube.component.html',\n  styleUrls: ['./youtube.component.css']\n})\nexport class YoutubeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<body>\n  <!-- Card title -->\n  <div class=\"widget-title\">YouTube <a href=\"https://www.youtube.com/channel/UCLkAepWjdylmXSltofFvsYQ\" title=\"BTS's YouTube Page\"><var class=\"arrow\">â†—</var></a></div>\n  <!-- Youtube container -->\n  <div class=\"youtube-video-container\">\n    <iframe\n      src=\"https://www.youtube.com/embed?max-results=1&controls=0&showinfo=0&rel=0&listType=user_uploads&list=BANGTANTV\"\n      allowfullscreen\n    >\n    </iframe>\n  </div>\n  <!-- Timestamp -->\n  <div class=\"timestamp\">Updated on \"Holder\"</div>\n</body>\n\n<!-- Youtube Script -->\n<script>\n  // 2. This code loads the IFrame Player API code asynchronously.\n  var tag = document.createElement(\"script\");\n\n  tag.src = \"https://www.youtube.com/iframe_api\";\n  var firstScriptTag = document.getElementsByTagName(\"script\")[0];\n  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n  // 3. This function creates an <iframe> (and YouTube player)\n  //    after the API code downloads.\n  var player;\n  function onYouTubeIframeAPIReady() {\n    player = new YT.Player(\"player\", {\n      videoId: \"M7lc1UVf-VE\",\n      events: {\n        onReady: onPlayerReady,\n        onStateChange: onPlayerStateChange,\n      },\n    });\n  }\n\n  // 4. The API will call this function when the video player is ready.\n  function onPlayerReady(event) {\n    event.target.playVideo();\n  }\n\n  // 5. The API calls this function when the player's state changes.\n  //    The function indicates that when playing a video (state=1),\n  //    the player should play for six seconds and then stop.\n  var done = false;\n  function onPlayerStateChange(event) {\n    if (event.data == YT.PlayerState.PLAYING && !done) {\n      setTimeout(stopVideo, 6000);\n      done = true;\n    }\n  }\n  function stopVideo() {\n    player.stopVideo();\n  }\n</script>\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Parser } from '@angular/compiler';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/internal/operators/map';\n\n @Injectable({\n   providedIn: 'root'\n })\nexport class TwitterService {\n\n  api_url = 'http://localhost:3000';\n  constructor(private http: HttpClient) {}\n\n\n    getTimeline(){\n      return this.http\n      .get<any[]>(this.api_url + '/user_timeline', {responseType: 'json'})\n      .pipe(map(data => data));\n\n    }\n   \n\n   getMentions(){\n     return this.http\n      .get<any[]>(this.api_url + '/mentions_timeline')\n      .pipe(map(data => data));\n   }\n  }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- Creates the header. -->\n<div class=\"header\">\n  <!-- Site icon and name. -->\n  <img class=\"logo\" src=\"assets/images/bts-verse-logo.png\" alt=\"Logo\" />\n  BTS-VERSE\n  <span class=\"icon-bar\">\n    <a href=\"https://www.facebook.com/bangtan.official/\">\n      <img class=\"icon\" src=\"assets/images/facebook.png\" alt=\"BTS's Facebook\" />\n    </a>\n    <a href=\"https://twitter.com/bts_twt\">\n      <img class=\"icon\" src=\"assets/images/twitter.png\" alt=\"BTS's Twitter\"/>\n    </a>\n    <a href=\"https://www.instagram.com/bts.bighitofficial/\">\n      <img class=\"icon\" src=\"assets/images/instagram.png\" alt=\"BTS's Instagram\" />\n    </a>\n    <a href=\"http://soundcloud.com/bangtan\">\n      <img class=\"icon\" src=\"assets/images/soundcloud.png\" alt=\"BTS's SoundCloud\"/>\n    </a>\n    <a href=\"https://www.youtube.com/user/BANGTANTV\">\n      <img class=\"icon\" src=\"assets/images/youtube.png\" alt=\"BTS's Youtube\" />\n    </a>\n    <a href=\"https://www.tiktok.com/@bts_official_bighit\">\n      <img class=\"icon\" src=\"assets/images/tiktok.png\" alt=\"BTS's Tiktok\"/>\n    </a>\n  </span>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Config } from \"./config\";\nimport { Component, OnInit } from \"@angular/core\";\nimport { WikipediaDataService } from \"src/app/wikipedia-data.service\";\n\n@Component({\n  selector: \"app-wikipedia\",\n  templateUrl: \"./wikipedia.component.html\",\n  styleUrls: [\"./wikipedia.component.css\"],\n})\nexport class WikipediaComponent implements OnInit {\n  extract_html: string;\n  timestamp: string;\n  thumbnail: {\n    source: string;\n    width: number;\n    height: number;\n  };\n\n  constructor(private wikipediaService: WikipediaDataService) {\n    /** Default values are set to errors in case the HTTP request is unsuccessful. */\n    this.extract_html = \"error - unable to retrieve data\";\n    this.timestamp = \"error - unable to retrieve data\";\n    this.thumbnail = {\n      source: \"error - unable to retrieve data\",\n      width: 0,\n      height: 0,\n    };\n  }\n\n  ngOnInit() {\n    /** Get the request from the wikipedia service and assign data to the Config interface for parsing. */\n    this.wikipediaService.getRequest().subscribe((data: Config) => {\n      (this.thumbnail = data.thumbnail),\n        (this.extract_html = data.extract_html),\n        (this.timestamp = data.timestamp);\n    });\n  }\n}\n","<body>\n  <!-- Card title. -->\n  <div class=\"widget-title\">\n    About BTS <a href=\"https://en.wikipedia.org/wiki/BTS\" title=\"BTS's Wikipedia Page\"><var class=\"arrow\">â†—</var></a>\n  </div>\n  <blockquote class=\"summary\">From Wikipedia, the free encyclopedia</blockquote>\n  <!-- Article body. -->\n  <div class=\"article\">\n    <img class=\"text-wrap\" alt=\"Image of BTS\" src=\"{{ thumbnail.source }}\" />\n    <div [innerHTML]=\"extract_html\"></div>\n  </div>\n  <!-- Timestamp of retrevial. -->\n  <div class=\"timestamp\">Retrieved on {{ timestamp }}</div>\n</body>\n","import { Config } from './wikipedia/config';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpClientJsonpModule } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class WikipediaDataService {\n\n  private WIKI_URL = \"https://en.wikipedia.org/api/rest_v1/page/summary/BTS\";\n\n  constructor(\n    private http: HttpClient,\n  ) {}\n\n  public getRequest() {\n    return this.http.get<Config>(this.WIKI_URL, {observe: 'body', responseType: 'json'});\n  }\n\n}\n\n\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'bts-verse';\n}\n","<body>\n<app-nav-bar></app-nav-bar>\n  <div class=\"row\">\n    <div class=\"column\">\n      <app-youtube></app-youtube>\n      <br />\n      <app-spotify></app-spotify>\n      <br />\n      <app-wikipedia></app-wikipedia>\n    </div>\n    <div class=\"column\">\n      <app-twitter-feed></app-twitter-feed>\n    </div>\n  </div>\n  <router-outlet></router-outlet>\n</body>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-spotify',\n  templateUrl: './spotify.component.html',\n  styleUrls: ['./spotify.component.css']\n})\nexport class SpotifyComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<body>\n  <!-- Component title. -->\n  <div class=\"widget-title\">\n    Spotify <a href=\"https://open.spotify.com/artist/3Nrfpe0tUJi4K4DXYWgMUX\" title=\"BTS's Spotify Page\"><var class=\"arrow\">â†—</var></a>\n  </div>\n  <!-- Spotify embed. -->\n  <div class=\"spotify-container\">\n    <iframe\n      src=\"https://open.spotify.com/embed/artist/3Nrfpe0tUJi4K4DXYWgMUX\"\n      frameborder=\"0\"\n      allowtransparency=\"true\"\n      allow=\"encrypted-media\"\n    >\n    </iframe>\n  </div>\n  <!-- Timestamp -->\n  <div class=\"timestamp\">Updated on \"Holder\"</div>\n</body>\n","import { WikipediaDataService } from 'src/app/wikipedia-data.service';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TwitterFeedComponent } from './twitter-feed/twitter-feed.component';\nimport { YoutubeComponent } from './youtube/youtube.component';\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\nimport { WikipediaComponent } from './wikipedia/wikipedia.component';\nimport { SpotifyComponent } from './spotify/spotify.component';\n\nconst appRoutes: Routes = [\n  {\n  path: 'tweets',\n  component: TwitterFeedComponent\n  },\n  {\n    path: '',\n    redirectTo: '',\n    pathMatch: 'full',\n  }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TwitterFeedComponent,\n    YoutubeComponent,\n    NavBarComponent,\n    WikipediaComponent,\n    SpotifyComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n  ],\n  providers: [WikipediaDataService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<script type=\"module\" src=\"./5-3/1/bts-verse/src/app/twitter-feed/twitter.js\"></script>\n\n<body>\n  <div class=\"widget-title\">Twitter <a href=\"https://twitter.com/BTS_twt\" title=\"BTS's Twitter Page\"><var class=\"arrow\">â†—</var></a></div>\n  <h4>\n    <p\n      class=\"twitter-timeline\"\n      href=\"https://twitter.com/BTS_twt?ref_src=twsrc%5Etfw\"\n      >Tweets by @BTS_twt and @BTS_bighit:</p>\n    \n  </h4>\n  <br/>\n  <script src = \"./twitter.js\"></script>\n  <div *ngIf=\"undefined === this.timeline\">Loading...</div>\n  <div *ngIf=\"undefined !== this.timeline\">\n    <div class = \"card-container\">\n  <ng-container *ngFor=\"let tweets of this.timeline.data; let i = index\">\n    <div class = \"card\">\n      <br>\n  <h3><div class=\"center\">Tweet {{i + 1}}</div></h3>\n  <p><img src = {{tweets.user.profile_image_url}}/>\n    {{tweets.user.name}}</p>    \n  <p>@{{tweets.user.screen_name}}</p>\n  <p>Tweeted: {{tweets.full_text}}</p>\n  <p><img src = \"./assets/images/Likes.png\" width=\"35\" height=\"35\">{{tweets.favorite_count}}</p>\n  <p><img src = \"./assets/images/Retweets.jpg\" width=\"30\" height=\"30\"> {{tweets.retweet_count}}</p>\n  <p>Created at: {{tweets.created_at}}</p>\n\n  <br>\n  </div>\n\n\n</ng-container>\n</div>\n<div class=\"timestamp\">Last Retrieved: {{this.timeline.resp.headers.date}}</div>\n\n</div>\n</body>\n\n  <!-- <script>\n    !(function (d, s, id) {\n      var js,\n        fjs = d.getElementsByTagName(s)[0],\n        p = /^http:/.test(d.location) ? \"http\" : \"https\";\n      if (!d.getElementById(id)) {\n        js = d.createElement(s);\n        js.id = id;\n        js.src = p + \"://platform.twitter.com/widgets.js\";\n        fjs.parentNode.insertBefore(js, fjs);\n      }\n    })(document, \"script\", \"twitter-wjs\");\n  </script>\n</body> -->\n","import { Component, OnInit } from '@angular/core';\nimport { TwitterService } from './twitterservice.service';\n\ndeclare function parser() : any; \ndeclare function create() : any;\n\n@Component({\n  selector: 'app-twitter-feed',\n  templateUrl: './twitter-feed.component.html',\n  styleUrls: ['./twitter-feed.component.css']\n})\nexport class TwitterFeedComponent implements OnInit {\n  timeline: any;\n  constructor(private api: TwitterService) {\n   }\n\n  ngOnInit() {\n    //create();\n    //parser();\n    this.getTwitterTimeline();\n    \n  }\n\n  getTwitterTimeline(): void  {\n    //create();\n    //parser();\n    this.api.getTimeline()\n    .subscribe(\n      timeline => {\n        this.timeline = timeline;\n        console.log(this.timeline);\n        \n      }\n    )\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}